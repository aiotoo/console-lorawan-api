// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/stream.proto

package service

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Message.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Body.
	Body string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// Properties.
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogItem) Reset() {
	*x = LogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogItem) ProtoMessage() {}

func (x *LogItem) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogItem.ProtoReflect.Descriptor instead.
func (*LogItem) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{0}
}

func (x *LogItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogItem) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LogItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogItem) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *LogItem) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type StreamGatewayFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (EUI64).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *StreamGatewayFramesRequest) Reset() {
	*x = StreamGatewayFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamGatewayFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGatewayFramesRequest) ProtoMessage() {}

func (x *StreamGatewayFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGatewayFramesRequest.ProtoReflect.Descriptor instead.
func (*StreamGatewayFramesRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StreamGatewayFramesRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type StreamDeviceFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *StreamDeviceFramesRequest) Reset() {
	*x = StreamDeviceFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceFramesRequest) ProtoMessage() {}

func (x *StreamDeviceFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceFramesRequest.ProtoReflect.Descriptor instead.
func (*StreamDeviceFramesRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StreamDeviceFramesRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type StreamDeviceEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *StreamDeviceEventsRequest) Reset() {
	*x = StreamDeviceEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceEventsRequest) ProtoMessage() {}

func (x *StreamDeviceEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamDeviceEventsRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{3}
}

func (x *StreamDeviceEventsRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

var File_external_service_stream_proto protoreflect.FileDescriptor

var file_external_service_stream_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x1a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x34, 0x0a,
	0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x45, 0x75, 0x69, 0x32, 0x87, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x7b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x30,
	0x01, 0x12, 0x7a, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x5f,
	0x65, 0x75, 0x69, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6f, 0x74,
	0x6f, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x72, 0x61, 0x77,
	0x61, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_service_stream_proto_rawDescOnce sync.Once
	file_external_service_stream_proto_rawDescData = file_external_service_stream_proto_rawDesc
)

func file_external_service_stream_proto_rawDescGZIP() []byte {
	file_external_service_stream_proto_rawDescOnce.Do(func() {
		file_external_service_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_stream_proto_rawDescData)
	})
	return file_external_service_stream_proto_rawDescData
}

var file_external_service_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_external_service_stream_proto_goTypes = []any{
	(*LogItem)(nil),                    // 0: service.LogItem
	(*StreamGatewayFramesRequest)(nil), // 1: service.StreamGatewayFramesRequest
	(*StreamDeviceFramesRequest)(nil),  // 2: service.StreamDeviceFramesRequest
	(*StreamDeviceEventsRequest)(nil),  // 3: service.StreamDeviceEventsRequest
	nil,                                // 4: service.LogItem.PropertiesEntry
	(*timestamppb.Timestamp)(nil),      // 5: google.protobuf.Timestamp
}
var file_external_service_stream_proto_depIdxs = []int32{
	5, // 0: service.LogItem.time:type_name -> google.protobuf.Timestamp
	4, // 1: service.LogItem.properties:type_name -> service.LogItem.PropertiesEntry
	1, // 2: service.StreamService.StreamGatewayFrames:input_type -> service.StreamGatewayFramesRequest
	2, // 3: service.StreamService.StreamDeviceFrames:input_type -> service.StreamDeviceFramesRequest
	3, // 4: service.StreamService.StreamDeviceEvents:input_type -> service.StreamDeviceEventsRequest
	0, // 5: service.StreamService.StreamGatewayFrames:output_type -> service.LogItem
	0, // 6: service.StreamService.StreamDeviceFrames:output_type -> service.LogItem
	0, // 7: service.StreamService.StreamDeviceEvents:output_type -> service.LogItem
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_external_service_stream_proto_init() }
func file_external_service_stream_proto_init() {
	if File_external_service_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_service_stream_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StreamGatewayFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StreamDeviceFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StreamDeviceEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_service_stream_proto_goTypes,
		DependencyIndexes: file_external_service_stream_proto_depIdxs,
		MessageInfos:      file_external_service_stream_proto_msgTypes,
	}.Build()
	File_external_service_stream_proto = out.File
	file_external_service_stream_proto_rawDesc = nil
	file_external_service_stream_proto_goTypes = nil
	file_external_service_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	// Stream frame for the given Gateway ID.
	StreamGatewayFrames(ctx context.Context, in *StreamGatewayFramesRequest, opts ...grpc.CallOption) (StreamService_StreamGatewayFramesClient, error)
	// Stream frames for the given Device EUI.
	StreamDeviceFrames(ctx context.Context, in *StreamDeviceFramesRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceFramesClient, error)
	// Stream events for the given Device EUI.
	StreamDeviceEvents(ctx context.Context, in *StreamDeviceEventsRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceEventsClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) StreamGatewayFrames(ctx context.Context, in *StreamGatewayFramesRequest, opts ...grpc.CallOption) (StreamService_StreamGatewayFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/service.StreamService/StreamGatewayFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamGatewayFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamGatewayFramesClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamGatewayFramesClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamGatewayFramesClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) StreamDeviceFrames(ctx context.Context, in *StreamDeviceFramesRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[1], "/service.StreamService/StreamDeviceFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamDeviceFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamDeviceFramesClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamDeviceFramesClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamDeviceFramesClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) StreamDeviceEvents(ctx context.Context, in *StreamDeviceEventsRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[2], "/service.StreamService/StreamDeviceEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamDeviceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamDeviceEventsClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamDeviceEventsClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamDeviceEventsClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	// Stream frame for the given Gateway ID.
	StreamGatewayFrames(*StreamGatewayFramesRequest, StreamService_StreamGatewayFramesServer) error
	// Stream frames for the given Device EUI.
	StreamDeviceFrames(*StreamDeviceFramesRequest, StreamService_StreamDeviceFramesServer) error
	// Stream events for the given Device EUI.
	StreamDeviceEvents(*StreamDeviceEventsRequest, StreamService_StreamDeviceEventsServer) error
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) StreamGatewayFrames(*StreamGatewayFramesRequest, StreamService_StreamGatewayFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGatewayFrames not implemented")
}
func (*UnimplementedStreamServiceServer) StreamDeviceFrames(*StreamDeviceFramesRequest, StreamService_StreamDeviceFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceFrames not implemented")
}
func (*UnimplementedStreamServiceServer) StreamDeviceEvents(*StreamDeviceEventsRequest, StreamService_StreamDeviceEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceEvents not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_StreamGatewayFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGatewayFramesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamGatewayFrames(m, &streamServiceStreamGatewayFramesServer{stream})
}

type StreamService_StreamGatewayFramesServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamGatewayFramesServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamGatewayFramesServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_StreamDeviceFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceFramesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamDeviceFrames(m, &streamServiceStreamDeviceFramesServer{stream})
}

type StreamService_StreamDeviceFramesServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamDeviceFramesServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamDeviceFramesServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_StreamDeviceEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamDeviceEvents(m, &streamServiceStreamDeviceEventsServer{stream})
}

type StreamService_StreamDeviceEventsServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamDeviceEventsServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamDeviceEventsServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGatewayFrames",
			Handler:       _StreamService_StreamGatewayFrames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDeviceFrames",
			Handler:       _StreamService_StreamDeviceFrames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDeviceEvents",
			Handler:       _StreamService_StreamDeviceEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "external/service/stream.proto",
}
