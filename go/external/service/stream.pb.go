// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/stream.proto

package service

import (
	context "context"
	util "github.com/aiotoo/console-lorawan-api/go/v4/util"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Message.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Body.
	Body string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// Properties.
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogItem) Reset() {
	*x = LogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogItem) ProtoMessage() {}

func (x *LogItem) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogItem.ProtoReflect.Descriptor instead.
func (*LogItem) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{0}
}

func (x *LogItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogItem) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LogItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogItem) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *LogItem) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type StreamGatewayFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (EUI64).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *StreamGatewayFramesRequest) Reset() {
	*x = StreamGatewayFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamGatewayFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGatewayFramesRequest) ProtoMessage() {}

func (x *StreamGatewayFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGatewayFramesRequest.ProtoReflect.Descriptor instead.
func (*StreamGatewayFramesRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StreamGatewayFramesRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type StreamDeviceFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *StreamDeviceFramesRequest) Reset() {
	*x = StreamDeviceFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceFramesRequest) ProtoMessage() {}

func (x *StreamDeviceFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceFramesRequest.ProtoReflect.Descriptor instead.
func (*StreamDeviceFramesRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{2}
}

func (x *StreamDeviceFramesRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type StreamDeviceEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *StreamDeviceEventsRequest) Reset() {
	*x = StreamDeviceEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceEventsRequest) ProtoMessage() {}

func (x *StreamDeviceEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamDeviceEventsRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{3}
}

func (x *StreamDeviceEventsRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*UploadRequest_Metadata
	//	*UploadRequest_Chunk
	Data isUploadRequest_Data `protobuf_oneof:"data"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{4}
}

func (m *UploadRequest) GetData() isUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadRequest) GetMetadata() *FileMetadata {
	if x, ok := x.GetData().(*UploadRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadRequest) GetChunk() []byte {
	if x, ok := x.GetData().(*UploadRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadRequest_Data interface {
	isUploadRequest_Data()
}

type UploadRequest_Metadata struct {
	Metadata *FileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadRequest_Metadata) isUploadRequest_Data() {}

func (*UploadRequest_Chunk) isUploadRequest_Data() {}

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region.
	Region util.Region `protobuf:"varint,1,opt,name=region,proto3,enum=util.Region" json:"region,omitempty"`
	// Region configuration ID.
	RegionConfigId string `protobuf:"bytes,2,opt,name=region_config_id,json=regionConfigId,proto3" json:"region_config_id,omitempty"`
	// Device class.
	DeviceClass util.DeviceClass `protobuf:"varint,3,opt,name=device_class,json=deviceClass,proto3,enum=util.DeviceClass" json:"device_class,omitempty"`
	// LoRaWAN mac-version.
	MacVersion util.MacVersion `protobuf:"varint,4,opt,name=mac_version,json=macVersion,proto3,enum=util.MacVersion" json:"mac_version,omitempty"`
	// Regional parameters revision.
	RegParamsRevision util.RegParamsRevision `protobuf:"varint,5,opt,name=reg_params_revision,json=regParamsRevision,proto3,enum=util.RegParamsRevision" json:"reg_params_revision,omitempty"`
	// ADR algorithm ID.
	AdrAlgorithm string `protobuf:"bytes,6,opt,name=adr_algorithm,json=adrAlgorithm,proto3" json:"adr_algorithm,omitempty"`
	// Payload codec runtime.
	PayloadCodecRuntime util.CodecRuntime `protobuf:"varint,7,opt,name=payload_codec_runtime,json=payloadCodecRuntime,proto3,enum=util.CodecRuntime" json:"payload_codec_runtime,omitempty"`
	// Join Mode
	DeviceJoinMode util.JoinMode `protobuf:"varint,8,opt,name=device_join_mode,json=deviceJoinMode,proto3,enum=util.JoinMode" json:"device_join_mode,omitempty"`
	// Additional parameters
	FlushQueueOnActivate    bool   `protobuf:"varint,9,opt,name=flush_queue_on_activate,json=flushQueueOnActivate,proto3" json:"flush_queue_on_activate,omitempty"`
	SkipFcntCheck           bool   `protobuf:"varint,10,opt,name=skip_fcnt_check,json=skipFcntCheck,proto3" json:"skip_fcnt_check,omitempty"`
	IsDisabled              bool   `protobuf:"varint,11,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	AbpRx1Delay             uint32 `protobuf:"varint,12,opt,name=abp_rx1_delay,json=abpRx1Delay,proto3" json:"abp_rx1_delay,omitempty"`
	ClassBTimeout           uint32 `protobuf:"varint,13,opt,name=class_b_timeout,json=classBTimeout,proto3" json:"class_b_timeout,omitempty"`
	ClassBPingSlotNbK       uint32 `protobuf:"varint,14,opt,name=class_b_ping_slot_nb_k,json=classBPingSlotNbK,proto3" json:"class_b_ping_slot_nb_k,omitempty"`
	ClassBPingSlotDr        uint32 `protobuf:"varint,15,opt,name=class_b_ping_slot_dr,json=classBPingSlotDr,proto3" json:"class_b_ping_slot_dr,omitempty"`
	ClassBPingSlotFreq      uint32 `protobuf:"varint,16,opt,name=class_b_ping_slot_freq,json=classBPingSlotFreq,proto3" json:"class_b_ping_slot_freq,omitempty"`
	ClassCTimeout           uint32 `protobuf:"varint,17,opt,name=class_c_timeout,json=classCTimeout,proto3" json:"class_c_timeout,omitempty"`
	AbpRx1DrOffset          uint32 `protobuf:"varint,18,opt,name=abp_rx1_dr_offset,json=abpRx1DrOffset,proto3" json:"abp_rx1_dr_offset,omitempty"`
	AbpRx2Dr                uint32 `protobuf:"varint,19,opt,name=abp_rx2_dr,json=abpRx2Dr,proto3" json:"abp_rx2_dr,omitempty"`
	AbpRx2Freq              uint32 `protobuf:"varint,20,opt,name=abp_rx2_freq,json=abpRx2Freq,proto3" json:"abp_rx2_freq,omitempty"`
	UplinkInterval          uint32 `protobuf:"varint,21,opt,name=uplink_interval,json=uplinkInterval,proto3" json:"uplink_interval,omitempty"`
	DeviceStatusReqInterval uint32 `protobuf:"varint,22,opt,name=device_status_req_interval,json=deviceStatusReqInterval,proto3" json:"device_status_req_interval,omitempty"`
	FCntUp                  uint32 `protobuf:"varint,23,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	NFCntDown               uint32 `protobuf:"varint,24,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	AFCntDown               uint32 `protobuf:"varint,25,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{5}
}

func (x *FileMetadata) GetRegion() util.Region {
	if x != nil {
		return x.Region
	}
	return util.Region(0)
}

func (x *FileMetadata) GetRegionConfigId() string {
	if x != nil {
		return x.RegionConfigId
	}
	return ""
}

func (x *FileMetadata) GetDeviceClass() util.DeviceClass {
	if x != nil {
		return x.DeviceClass
	}
	return util.DeviceClass(0)
}

func (x *FileMetadata) GetMacVersion() util.MacVersion {
	if x != nil {
		return x.MacVersion
	}
	return util.MacVersion(0)
}

func (x *FileMetadata) GetRegParamsRevision() util.RegParamsRevision {
	if x != nil {
		return x.RegParamsRevision
	}
	return util.RegParamsRevision(0)
}

func (x *FileMetadata) GetAdrAlgorithm() string {
	if x != nil {
		return x.AdrAlgorithm
	}
	return ""
}

func (x *FileMetadata) GetPayloadCodecRuntime() util.CodecRuntime {
	if x != nil {
		return x.PayloadCodecRuntime
	}
	return util.CodecRuntime(0)
}

func (x *FileMetadata) GetDeviceJoinMode() util.JoinMode {
	if x != nil {
		return x.DeviceJoinMode
	}
	return util.JoinMode(0)
}

func (x *FileMetadata) GetFlushQueueOnActivate() bool {
	if x != nil {
		return x.FlushQueueOnActivate
	}
	return false
}

func (x *FileMetadata) GetSkipFcntCheck() bool {
	if x != nil {
		return x.SkipFcntCheck
	}
	return false
}

func (x *FileMetadata) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *FileMetadata) GetAbpRx1Delay() uint32 {
	if x != nil {
		return x.AbpRx1Delay
	}
	return 0
}

func (x *FileMetadata) GetClassBTimeout() uint32 {
	if x != nil {
		return x.ClassBTimeout
	}
	return 0
}

func (x *FileMetadata) GetClassBPingSlotNbK() uint32 {
	if x != nil {
		return x.ClassBPingSlotNbK
	}
	return 0
}

func (x *FileMetadata) GetClassBPingSlotDr() uint32 {
	if x != nil {
		return x.ClassBPingSlotDr
	}
	return 0
}

func (x *FileMetadata) GetClassBPingSlotFreq() uint32 {
	if x != nil {
		return x.ClassBPingSlotFreq
	}
	return 0
}

func (x *FileMetadata) GetClassCTimeout() uint32 {
	if x != nil {
		return x.ClassCTimeout
	}
	return 0
}

func (x *FileMetadata) GetAbpRx1DrOffset() uint32 {
	if x != nil {
		return x.AbpRx1DrOffset
	}
	return 0
}

func (x *FileMetadata) GetAbpRx2Dr() uint32 {
	if x != nil {
		return x.AbpRx2Dr
	}
	return 0
}

func (x *FileMetadata) GetAbpRx2Freq() uint32 {
	if x != nil {
		return x.AbpRx2Freq
	}
	return 0
}

func (x *FileMetadata) GetUplinkInterval() uint32 {
	if x != nil {
		return x.UplinkInterval
	}
	return 0
}

func (x *FileMetadata) GetDeviceStatusReqInterval() uint32 {
	if x != nil {
		return x.DeviceStatusReqInterval
	}
	return 0
}

func (x *FileMetadata) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *FileMetadata) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *FileMetadata) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_external_service_stream_proto_rawDescGZIP(), []int{6}
}

func (x *UploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_external_service_stream_proto protoreflect.FileDescriptor

var file_external_service_stream_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x07, 0x4c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x1a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x34,
	0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x45, 0x75, 0x69, 0x22, 0x64, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x08, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4d, 0x61,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x64, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x46, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x66, 0x63, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x63, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x62, 0x70,
	0x52, 0x78, 0x31, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x31, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x62, 0x5f, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x62, 0x4b, 0x12, 0x2e, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x44, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53,
	0x6c, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x29, 0x0a, 0x11, 0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x62, 0x70, 0x52,
	0x78, 0x31, 0x44, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x62,
	0x70, 0x5f, 0x72, 0x78, 0x32, 0x5f, 0x64, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x62, 0x70, 0x52, 0x78, 0x32, 0x44, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x62, 0x70, 0x5f,
	0x72, 0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x62, 0x70, 0x52, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0c, 0x6e, 0x5f,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0c, 0x61,
	0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x2a, 0x0a, 0x0e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xc8, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x7b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x69, 0x6f, 0x74, 0x6f, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2d, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x76, 0x34, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_service_stream_proto_rawDescOnce sync.Once
	file_external_service_stream_proto_rawDescData = file_external_service_stream_proto_rawDesc
)

func file_external_service_stream_proto_rawDescGZIP() []byte {
	file_external_service_stream_proto_rawDescOnce.Do(func() {
		file_external_service_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_stream_proto_rawDescData)
	})
	return file_external_service_stream_proto_rawDescData
}

var file_external_service_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_external_service_stream_proto_goTypes = []any{
	(*LogItem)(nil),                    // 0: service.LogItem
	(*StreamGatewayFramesRequest)(nil), // 1: service.StreamGatewayFramesRequest
	(*StreamDeviceFramesRequest)(nil),  // 2: service.StreamDeviceFramesRequest
	(*StreamDeviceEventsRequest)(nil),  // 3: service.StreamDeviceEventsRequest
	(*UploadRequest)(nil),              // 4: service.UploadRequest
	(*FileMetadata)(nil),               // 5: service.FileMetadata
	(*UploadResponse)(nil),             // 6: service.UploadResponse
	nil,                                // 7: service.LogItem.PropertiesEntry
	(*timestamppb.Timestamp)(nil),      // 8: google.protobuf.Timestamp
	(util.Region)(0),                   // 9: util.Region
	(util.DeviceClass)(0),              // 10: util.DeviceClass
	(util.MacVersion)(0),               // 11: util.MacVersion
	(util.RegParamsRevision)(0),        // 12: util.RegParamsRevision
	(util.CodecRuntime)(0),             // 13: util.CodecRuntime
	(util.JoinMode)(0),                 // 14: util.JoinMode
}
var file_external_service_stream_proto_depIdxs = []int32{
	8,  // 0: service.LogItem.time:type_name -> google.protobuf.Timestamp
	7,  // 1: service.LogItem.properties:type_name -> service.LogItem.PropertiesEntry
	5,  // 2: service.UploadRequest.metadata:type_name -> service.FileMetadata
	9,  // 3: service.FileMetadata.region:type_name -> util.Region
	10, // 4: service.FileMetadata.device_class:type_name -> util.DeviceClass
	11, // 5: service.FileMetadata.mac_version:type_name -> util.MacVersion
	12, // 6: service.FileMetadata.reg_params_revision:type_name -> util.RegParamsRevision
	13, // 7: service.FileMetadata.payload_codec_runtime:type_name -> util.CodecRuntime
	14, // 8: service.FileMetadata.device_join_mode:type_name -> util.JoinMode
	1,  // 9: service.StreamService.StreamGatewayFrames:input_type -> service.StreamGatewayFramesRequest
	2,  // 10: service.StreamService.StreamDeviceFrames:input_type -> service.StreamDeviceFramesRequest
	3,  // 11: service.StreamService.StreamDeviceEvents:input_type -> service.StreamDeviceEventsRequest
	4,  // 12: service.StreamService.UploadFile:input_type -> service.UploadRequest
	0,  // 13: service.StreamService.StreamGatewayFrames:output_type -> service.LogItem
	0,  // 14: service.StreamService.StreamDeviceFrames:output_type -> service.LogItem
	0,  // 15: service.StreamService.StreamDeviceEvents:output_type -> service.LogItem
	6,  // 16: service.StreamService.UploadFile:output_type -> service.UploadResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_external_service_stream_proto_init() }
func file_external_service_stream_proto_init() {
	if File_external_service_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_service_stream_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StreamGatewayFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StreamDeviceFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StreamDeviceEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_stream_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_external_service_stream_proto_msgTypes[4].OneofWrappers = []any{
		(*UploadRequest_Metadata)(nil),
		(*UploadRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_service_stream_proto_goTypes,
		DependencyIndexes: file_external_service_stream_proto_depIdxs,
		MessageInfos:      file_external_service_stream_proto_msgTypes,
	}.Build()
	File_external_service_stream_proto = out.File
	file_external_service_stream_proto_rawDesc = nil
	file_external_service_stream_proto_goTypes = nil
	file_external_service_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	// Stream frame for the given Gateway ID.
	StreamGatewayFrames(ctx context.Context, in *StreamGatewayFramesRequest, opts ...grpc.CallOption) (StreamService_StreamGatewayFramesClient, error)
	// Stream frames for the given Device EUI.
	StreamDeviceFrames(ctx context.Context, in *StreamDeviceFramesRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceFramesClient, error)
	// Stream events for the given Device EUI.
	StreamDeviceEvents(ctx context.Context, in *StreamDeviceEventsRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceEventsClient, error)
	// Upload a file as a stream.
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (StreamService_UploadFileClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) StreamGatewayFrames(ctx context.Context, in *StreamGatewayFramesRequest, opts ...grpc.CallOption) (StreamService_StreamGatewayFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/service.StreamService/StreamGatewayFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamGatewayFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamGatewayFramesClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamGatewayFramesClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamGatewayFramesClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) StreamDeviceFrames(ctx context.Context, in *StreamDeviceFramesRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[1], "/service.StreamService/StreamDeviceFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamDeviceFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamDeviceFramesClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamDeviceFramesClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamDeviceFramesClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) StreamDeviceEvents(ctx context.Context, in *StreamDeviceEventsRequest, opts ...grpc.CallOption) (StreamService_StreamDeviceEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[2], "/service.StreamService/StreamDeviceEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamDeviceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_StreamDeviceEventsClient interface {
	Recv() (*LogItem, error)
	grpc.ClientStream
}

type streamServiceStreamDeviceEventsClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamDeviceEventsClient) Recv() (*LogItem, error) {
	m := new(LogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (StreamService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[3], "/service.StreamService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceUploadFileClient{stream}
	return x, nil
}

type StreamService_UploadFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type streamServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *streamServiceUploadFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	// Stream frame for the given Gateway ID.
	StreamGatewayFrames(*StreamGatewayFramesRequest, StreamService_StreamGatewayFramesServer) error
	// Stream frames for the given Device EUI.
	StreamDeviceFrames(*StreamDeviceFramesRequest, StreamService_StreamDeviceFramesServer) error
	// Stream events for the given Device EUI.
	StreamDeviceEvents(*StreamDeviceEventsRequest, StreamService_StreamDeviceEventsServer) error
	// Upload a file as a stream.
	UploadFile(StreamService_UploadFileServer) error
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) StreamGatewayFrames(*StreamGatewayFramesRequest, StreamService_StreamGatewayFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGatewayFrames not implemented")
}
func (*UnimplementedStreamServiceServer) StreamDeviceFrames(*StreamDeviceFramesRequest, StreamService_StreamDeviceFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceFrames not implemented")
}
func (*UnimplementedStreamServiceServer) StreamDeviceEvents(*StreamDeviceEventsRequest, StreamService_StreamDeviceEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceEvents not implemented")
}
func (*UnimplementedStreamServiceServer) UploadFile(StreamService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_StreamGatewayFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGatewayFramesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamGatewayFrames(m, &streamServiceStreamGatewayFramesServer{stream})
}

type StreamService_StreamGatewayFramesServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamGatewayFramesServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamGatewayFramesServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_StreamDeviceFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceFramesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamDeviceFrames(m, &streamServiceStreamDeviceFramesServer{stream})
}

type StreamService_StreamDeviceFramesServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamDeviceFramesServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamDeviceFramesServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_StreamDeviceEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamDeviceEvents(m, &streamServiceStreamDeviceEventsServer{stream})
}

type StreamService_StreamDeviceEventsServer interface {
	Send(*LogItem) error
	grpc.ServerStream
}

type streamServiceStreamDeviceEventsServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamDeviceEventsServer) Send(m *LogItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).UploadFile(&streamServiceUploadFileServer{stream})
}

type StreamService_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type streamServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *streamServiceUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceUploadFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGatewayFrames",
			Handler:       _StreamService_StreamGatewayFrames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDeviceFrames",
			Handler:       _StreamService_StreamDeviceFrames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDeviceEvents",
			Handler:       _StreamService_StreamDeviceEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _StreamService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "external/service/stream.proto",
}
