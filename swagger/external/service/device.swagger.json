{
  "swagger": "2.0",
  "info": {
    "title": "external/service/device.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/devices": {
      "get": {
        "summary": "Get the list of devices.",
        "operationId": "DeviceService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceListDevicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of devices to return in the result-set.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset in the result-set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "If set, the given string will be used to search on name (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationId",
            "description": "Application ID (UUID) to filter devices on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "multicastGroupId",
            "description": "Multicst-group ID (UUID) to filter devices on.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "post": {
        "summary": "Create the given device.",
        "operationId": "DeviceService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceCreateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/bulkdelete": {
      "post": {
        "summary": "Delete the device with the given DevEUI.",
        "operationId": "DeviceService_DeleteBulkDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceDeleteBulkDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/bulkupload": {
      "post": {
        "summary": "Upload CSV file using a client streaming RPC.",
        "operationId": "DeviceService_BulkUpload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceBulkUploadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}": {
      "get": {
        "summary": "Get returns the device for the given DevEUI.",
        "operationId": "DeviceService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete the device with the given DevEUI.",
        "operationId": "DeviceService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/activation": {
      "get": {
        "summary": "GetActivation returns the current activation details of the device (OTAA or\nABP).",
        "operationId": "DeviceService_GetActivation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetDeviceActivationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Deactivate de-activates the device.",
        "operationId": "DeviceService_Deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/dev-nonces": {
      "delete": {
        "summary": "FlushDevNonces flushes the OTAA device nonces.",
        "operationId": "DeviceService_FlushDevNonces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/keys": {
      "get": {
        "summary": "Get the device-keys for the given DevEUI.",
        "operationId": "DeviceService_GetKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetDeviceKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete the device-keys for the given DevEUI.",
        "operationId": "DeviceService_DeleteKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/queue": {
      "get": {
        "summary": "GetQueue returns the downlink device-queue.",
        "operationId": "DeviceService_GetQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceGetDeviceQueueItemsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "countOnly",
            "description": "Return only the count, not the result-set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "FlushQueue flushes the downlink device-queue.",
        "operationId": "DeviceService_FlushQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{device.devEui}": {
      "put": {
        "summary": "Update the given device.",
        "operationId": "DeviceService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "device.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceUpdateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{deviceActivation.devEui}/activate": {
      "post": {
        "summary": "Activate (re)activates the device with the given parameters (for ABP or for\nimporting OTAA activations).",
        "operationId": "DeviceService_Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceActivation.devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceActivateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{deviceKeys.devEui}/keys": {
      "post": {
        "summary": "Create the given device-keys.",
        "operationId": "DeviceService_CreateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceKeys.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceCreateDeviceKeysRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "put": {
        "summary": "Update the given device-keys.",
        "operationId": "DeviceService_UpdateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceKeys.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceUpdateDeviceKeysRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{queueItem.devEui}/queue": {
      "post": {
        "summary": "Enqueue adds the given item to the downlink queue.",
        "operationId": "DeviceService_Enqueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceEnqueueDeviceQueueItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "queueItem.devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceEnqueueDeviceQueueItemRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "serviceActivateDeviceRequest": {
      "type": "object",
      "properties": {
        "deviceActivation": {
          "$ref": "#/definitions/serviceDeviceActivation",
          "description": "Device activation object."
        }
      }
    },
    "serviceBulkUploadResponse": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "Uploaded file path"
        },
        "message": {
          "type": "string",
          "title": "Status message"
        },
        "devicesCreated": {
          "type": "integer",
          "format": "int64",
          "title": "Number of devices created"
        },
        "devEuis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of DevEUIs for created devices"
        }
      }
    },
    "serviceCreateDeviceKeysRequest": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/serviceDeviceKeys",
          "description": "Device-keys object."
        }
      }
    },
    "serviceCreateDeviceRequest": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/serviceDevice",
          "description": "Device object."
        }
      }
    },
    "serviceDeleteBulkDeviceRequest": {
      "type": "object",
      "properties": {
        "devEuis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "DevEUI (EUI64)."
        }
      }
    },
    "serviceDevice": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "applicationId": {
          "type": "string",
          "description": "Application ID (UUID)."
        },
        "skipFcntCheck": {
          "type": "boolean",
          "description": "Skip frame-counter checks (this is insecure, but could be helpful for\ndebugging)."
        },
        "isDisabled": {
          "type": "boolean",
          "description": "Device is disabled."
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables (user defined).\nThese variables can be used together with integrations to store tokens /\nsecrets that must be configured per device. These variables are not\nexposed in the event payloads."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags (user defined).\nThese tags can be used to add additional information to the device.\nThese tags are exposed in all the integration events."
        },
        "joinEui": {
          "type": "string",
          "description": "JoinEUI (optional, EUI64).\nThis field will be automatically set / updated on OTAA. However, in some\ncases it must be pre-configured. For example to allow OTAA using a Relay.\nIn this case the Relay needs to know the JoinEUI + DevEUI combinations\nof the devices for which it needs to forward uplinks."
        },
        "deviceClass": {
          "$ref": "#/definitions/utilDeviceClass",
          "description": "Enabled device class."
        },
        "deviceJoinMode": {
          "$ref": "#/definitions/utilJoinMode",
          "description": "Supports OTAA."
        },
        "keys": {
          "$ref": "#/definitions/serviceDeviceKeys",
          "title": "Device Keys for OTAA"
        },
        "deviceActivation": {
          "$ref": "#/definitions/serviceDeviceActivation",
          "description": "Device activation object."
        },
        "region": {
          "$ref": "#/definitions/utilRegion",
          "description": "Region."
        },
        "regionConfigId": {
          "type": "string",
          "description": "Region configuration ID.\nIf set, devices will only use the associated region. If let blank, then\ndevices will use all regions matching the selected common-name. Note\nthat multiple region configurations can exist for the same common-name,\ne.g. to provide an 8 channel and 16 channel configuration for the US915\nband."
        },
        "macVersion": {
          "$ref": "#/definitions/utilMacVersion",
          "description": "LoRaWAN mac-version."
        },
        "regParamsRevision": {
          "$ref": "#/definitions/utilRegParamsRevision",
          "description": "Regional parameters revision."
        },
        "adrAlgorithmId": {
          "type": "string",
          "description": "ADR algorithm ID."
        },
        "payloadCodecRuntime": {
          "$ref": "#/definitions/utilCodecRuntime",
          "description": "Payload codec runtime."
        },
        "payloadCodecScript": {
          "type": "string",
          "description": "Payload codec script."
        },
        "classBTimeout": {
          "type": "integer",
          "format": "int64",
          "description": "Class-B timeout (seconds).\nThis is the maximum time ChirpStack will wait to receive an acknowledgement\nfrom the device (if requested)."
        },
        "classBPingSlotNbK": {
          "type": "integer",
          "format": "int64",
          "description": "Class-B ping-slots per beacon period.\nValid options are: 0 - 7.\n\nThe actual number of ping-slots per beacon period equals to 2^k."
        },
        "classBPingSlotDr": {
          "type": "integer",
          "format": "int64",
          "description": "Class-B ping-slot DR."
        },
        "classBPingSlotFreq": {
          "type": "integer",
          "format": "int64",
          "description": "Class-B ping-slot freq (Hz)."
        },
        "classCTimeout": {
          "type": "integer",
          "format": "int64",
          "description": "Class-C timeout (seconds).\nThis is the maximum time ChirpStack will wait to receive an acknowledgement\nfrom the device (if requested)."
        },
        "abpRx1Delay": {
          "type": "integer",
          "format": "int64",
          "description": "RX1 delay (for ABP)."
        },
        "abpRx1DrOffset": {
          "type": "integer",
          "format": "int64",
          "description": "RX1 DR offset (for ABP)."
        },
        "abpRx2Dr": {
          "type": "integer",
          "format": "int64",
          "description": "RX2 DR (for ABP)."
        },
        "abpRx2Freq": {
          "type": "integer",
          "format": "int64",
          "description": "RX2 frequency (for ABP, Hz)."
        },
        "flushQueueOnActivate": {
          "type": "boolean",
          "description": "Flush queue on device activation."
        },
        "uplinkInterval": {
          "type": "integer",
          "format": "int64",
          "description": "Uplink interval (seconds).\nThis defines the expected uplink interval which the device uses for\ncommunication. If the uplink interval has expired and no uplink has\nbeen received, the device is considered inactive."
        },
        "deviceStatusReqInterval": {
          "type": "integer",
          "format": "int64",
          "description": "Device-status request interval (times / day).\nThis defines the times per day that ChirpStack will request the\ndevice-status from the device."
        }
      }
    },
    "serviceDeviceActivation": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "Device EUI (EUI64)."
        },
        "devAddr": {
          "type": "string",
          "description": "Device address (HEX encoded)."
        },
        "appSKey": {
          "type": "string",
          "description": "Application session key (HEX encoded)."
        },
        "nwkSEncKey": {
          "type": "string",
          "title": "Network session encryption key (HEX encoded).\nNote: For ABP in LoRaWAN 1.0.x, use this, the serving and the forwarding\nnetwork session integrity key fields with the LoRaWAN 1.0.x 'NwkSKey`!"
        },
        "sNwkSIntKey": {
          "type": "string",
          "description": "Serving network session integrity key (HEX encoded)."
        },
        "fNwkSIntKey": {
          "type": "string",
          "description": "Forwarding network session integrity key (HEX encoded)."
        },
        "fCntUp": {
          "type": "integer",
          "format": "int64",
          "description": "Uplink frame-counter."
        },
        "nFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink network frame-counter."
        },
        "aFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink application frame-counter."
        }
      }
    },
    "serviceDeviceKeys": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "nwkKey": {
          "type": "string",
          "title": "Network root key (128 bit).\nNote: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!"
        },
        "appKey": {
          "type": "string",
          "title": "Application root key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.1.x devices!"
        }
      }
    },
    "serviceDeviceListItem": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last seen at timestamp."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        }
      }
    },
    "serviceDeviceQueueItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID (UUID).\nThis is automatically generated on enqueue."
        },
        "devEui": {
          "type": "string",
          "description": "Device EUI (EUI64)."
        },
        "confirmed": {
          "type": "boolean",
          "description": "Confirmed."
        },
        "fPort": {
          "type": "integer",
          "format": "int64",
          "description": "FPort (must be \u003e 0)."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Data.\nOr use the json_object field when a codec has been configured."
        },
        "object": {
          "type": "object",
          "description": "Only use this when a codec has been configured that can encode this\nobject to bytes."
        },
        "isPending": {
          "type": "boolean",
          "description": "Is pending.\nThis is set by ChirpStack to true when the downlink is pending (e.g. it\nhas been sent, but a confirmation is still pending)."
        },
        "fCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink frame-counter.\nDo not set this for plain-text data payloads. It will be automatically set\nby ChirpStack when the payload has been sent as downlink."
        },
        "isEncrypted": {
          "type": "boolean",
          "description": "Is encrypted.\nThis must be set to true if the end-application has already encrypted\nthe data payload. In this case, the f_cnt_down field must be set to\nthe corresponding frame-counter which has been used during the encryption."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Expires at (optional).\nExpired queue-items will be automatically removed from the queue."
        }
      }
    },
    "serviceEnqueueDeviceQueueItemRequest": {
      "type": "object",
      "properties": {
        "queueItem": {
          "$ref": "#/definitions/serviceDeviceQueueItem"
        }
      }
    },
    "serviceEnqueueDeviceQueueItemResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID (UUID)."
        }
      }
    },
    "serviceGetDeviceActivationResponse": {
      "type": "object",
      "properties": {
        "deviceActivation": {
          "$ref": "#/definitions/serviceDeviceActivation",
          "description": "Device activation object."
        }
      }
    },
    "serviceGetDeviceKeysResponse": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/serviceDeviceKeys",
          "description": "Device-keys object."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        }
      }
    },
    "serviceGetDeviceQueueItemsResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of queue items."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceDeviceQueueItem"
          },
          "description": "Result-set."
        }
      }
    },
    "serviceGetDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/serviceDevice",
          "description": "Device object."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last seen at timestamp."
        }
      }
    },
    "serviceListDevicesResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of devices."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceDeviceListItem"
          },
          "description": "Result-set."
        }
      }
    },
    "serviceUpdateDeviceKeysRequest": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/serviceDeviceKeys",
          "description": "Device-keys object."
        }
      }
    },
    "serviceUpdateDeviceRequest": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/serviceDevice",
          "description": "Device object."
        }
      }
    },
    "utilCodecRuntime": {
      "type": "string",
      "enum": [
        "NONE",
        "CAYENNE_LPP",
        "JS"
      ],
      "default": "NONE",
      "description": " - NONE: None.\n - CAYENNE_LPP: Cayenne LPP.\n - JS: JavaScript."
    },
    "utilDeviceClass": {
      "type": "string",
      "enum": [
        "CLASS_A",
        "CLASS_B",
        "CLASS_C"
      ],
      "default": "CLASS_A",
      "description": " - CLASS_A: Class-A.\n - CLASS_B: Class-B.\n - CLASS_C: Class-C."
    },
    "utilJoinMode": {
      "type": "string",
      "enum": [
        "OTAA",
        "ABP"
      ],
      "default": "OTAA",
      "description": " - OTAA: OTAA.\n - ABP: ABP."
    },
    "utilMacVersion": {
      "type": "string",
      "enum": [
        "LORAWAN_1_0_0",
        "LORAWAN_1_0_1",
        "LORAWAN_1_0_2",
        "LORAWAN_1_0_3",
        "LORAWAN_1_0_4",
        "LORAWAN_1_1_0"
      ],
      "default": "LORAWAN_1_0_0"
    },
    "utilRegParamsRevision": {
      "type": "string",
      "enum": [
        "A",
        "B",
        "RP002_1_0_0",
        "RP002_1_0_1",
        "RP002_1_0_2",
        "RP002_1_0_3",
        "RP002_1_0_4"
      ],
      "default": "A"
    },
    "utilRegion": {
      "type": "string",
      "enum": [
        "EU868",
        "US915",
        "CN779",
        "EU433",
        "AU915",
        "CN470",
        "AS923",
        "AS923_2",
        "AS923_3",
        "AS923_4",
        "KR920",
        "IN865",
        "RU864",
        "ISM2400"
      ],
      "default": "EU868",
      "title": "- EU868: EU868\n - US915: US915\n - CN779: CN779\n - EU433: EU433\n - AU915: AU915\n - CN470: CN470\n - AS923: AS923\n - AS923_2: AS923 with -1.80 MHz frequency offset\n - AS923_3: AS923 with -6.60 MHz frequency offset\n - AS923_4: (AS923 with -5.90 MHz frequency offset).\n - KR920: KR920\n - IN865: IN865\n - RU864: RU864\n - ISM2400: ISM2400 (LoRaWAN 2.4 GHz)"
    }
  }
}
