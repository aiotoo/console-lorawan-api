syntax = "proto3";

package service;

option go_package = "github.com/aiotoo/console-lorawan-api/go/v4/external/service";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "util/util.proto";

service DeviceService {
  // Create the given device.
  rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/devices"
      body : "*"
    };
  }

  // Get returns the device for the given DevEUI.
  rpc Get(GetDeviceRequest) returns (GetDeviceResponse) {
    option (google.api.http) = {
      get : "/api/devices/{dev_eui}"
    };
  }

  // Update the given device.
  rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/api/devices/{device.dev_eui}"
      body : "*"
    };
  }

  // Delete the device with the given DevEUI.
  rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/api/devices/{dev_eui}"
    };
  }

  // Get the list of devices.
  rpc List(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get : "/api/devices"
    };
  }

  // // Create the given device-keys.
  // rpc CreateKeys(CreateDeviceKeysRequest) returns (google.protobuf.Empty) {
  //   option (google.api.http) = {
  //     post : "/api/devices/{device_keys.dev_eui}/keys"
  //     body : "*"
  //   };
  // }

  // // Get the device-keys for the given DevEUI.
  // rpc GetKeys(GetDeviceKeysRequest) returns (GetDeviceKeysResponse) {
  //   option (google.api.http) = {
  //     get : "/api/devices/{dev_eui}/keys"
  //   };
  // }

  // Update the given device-keys.
  rpc UpdateKeys(UpdateDeviceKeysRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/api/devices/{device_keys.dev_eui}/keys"
      body : "*"
    };
  }

  // FlushDevNonces flushes the OTAA device nonces.
  rpc FlushDevNonces(FlushDevNoncesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/api/devices/{dev_eui}/dev-nonces"
    };
  }

  // Activate (re)activates the device with the given parameters (for ABP or for
  // importing OTAA activations).
  rpc Activate(ActivateDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/devices/{device_activation.dev_eui}/activate"
      body : "*"
    };
  }

  // Deactivate de-activates the device.
  rpc Deactivate(DeactivateDeviceRequest) returns (google.protobuf.Empty) { // // Join-Server context.
    // // A non-empty value indicatest that ChirpStack does not have access to
    // // the AppSKey and that the encryption / decryption of the payloads is
    // // the responsibility of the end-application.
    // common.JoinServerContext join_server_context = 2;
    option (google.api.http) = {
      delete : "/api/devices/{dev_eui}/activation"
    };
  }

  // GetActivation returns the current activation details of the device (OTAA or
  // ABP).
  rpc GetActivation(GetDeviceActivationRequest)
      returns (GetDeviceActivationResponse) {
    option (google.api.http) = {
      get : "/api/devices/{dev_eui}/activation"
    };
  }


}


message CreateDeviceRequest {
  // Device object.
  Device device = 1;
}

message DeviceKeys {
  // DevEUI (EUI64).
  string dev_eui = 1;

  // Network root key (128 bit).
  // Note: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!
  string nwk_key = 2;

  // Application root key (128 bit).
  // Note: This field only needs to be set for LoRaWAN 1.1.x devices!
  string app_key = 3;
}

message DeviceActivation {
  // Device EUI (EUI64).
  string dev_eui = 1;

  // Device address (HEX encoded).
  string dev_addr = 2;

  // Application session key (HEX encoded).
  string app_s_key = 3;

  // Network session encryption key (HEX encoded).
  // Note: For ABP in LoRaWAN 1.0.x, use this, the serving and the forwarding
  // network session integrity key fields with the LoRaWAN 1.0.x 'NwkSKey`!
  string nwk_s_enc_key = 4;

  // Serving network session integrity key (HEX encoded).
  string s_nwk_s_int_key = 8;

  // Forwarding network session integrity key (HEX encoded).
  string f_nwk_s_int_key = 9;

  // Uplink frame-counter.
  uint32 f_cnt_up = 5;

  // Downlink network frame-counter.
  uint32 n_f_cnt_down = 6;

  // Downlink application frame-counter.
  uint32 a_f_cnt_down = 10;
}

enum CodecRuntime {
  // None.
  NONE = 0;

  // Cayenne LPP.
  CAYENNE_LPP = 1;

  // JavaScript.
  JS = 2;
}

message Device {
  // DevEUI (EUI64).
  string dev_eui = 1;

  // Name.
  string name = 2;

  // Description.
  string description = 3;

  // Application ID (UUID).
  string application_id = 4;

  // Device-profile ID (UUID).
  // string device_profile_id = 5;

  // Skip frame-counter checks (this is insecure, but could be helpful for
  // debugging).
  bool skip_fcnt_check = 5;

  // Device is disabled.
  bool is_disabled = 6;

  // Variables (user defined).
  // These variables can be used together with integrations to store tokens /
  // secrets that must be configured per device. These variables are not
  // exposed in the event payloads.
  map<string, string> variables = 7;

  // Tags (user defined).
  // These tags can be used to add additional information to the device.
  // These tags are exposed in all the integration events.
  map<string, string> tags = 8;

  // JoinEUI (optional, EUI64).
  // This field will be automatically set / updated on OTAA. However, in some
  // cases it must be pre-configured. For example to allow OTAA using a Relay.
  // In this case the Relay needs to know the JoinEUI + DevEUI combinations
  // of the devices for which it needs to forward uplinks.
  string join_eui = 9;

  // Enabled device class.
  util.DeviceClass device_class= 10;

  // Supports OTAA.
  bool supports_otaa = 11;

  //Device Keys for OTAA
  DeviceKeys keys = 12;

  // Device activation object.
  DeviceActivation device_activation = 13;

  // Region.
  util.Region region = 14;

  // LoRaWAN mac-version.
  util.MacVersion mac_version = 15;

  // Regional parameters revision.
  util.RegParamsRevision reg_params_revision = 16;

  // ADR algorithm ID.
  string adr_algorithm_id = 17;

  // Payload codec runtime.
  CodecRuntime payload_codec_runtime = 18;

  // Payload codec script.
  string payload_codec_script = 19;

  // Class-B timeout (seconds).
  // This is the maximum time ChirpStack will wait to receive an acknowledgement
  // from the device (if requested).
  uint32 class_b_timeout = 20;

  // Class-B ping-slots per beacon period.
  // Valid options are: 0 - 7.
  //
  // The actual number of ping-slots per beacon period equals to 2^k.
  uint32 class_b_ping_slot_nb_k = 21;

  // Class-B ping-slot DR.
  uint32 class_b_ping_slot_dr = 22;

  // Class-B ping-slot freq (Hz).
  uint32 class_b_ping_slot_freq = 23;

  // Class-C timeout (seconds).
  // This is the maximum time ChirpStack will wait to receive an acknowledgement
  // from the device (if requested).
  uint32 class_c_timeout = 24;

  // RX1 delay (for ABP).
  uint32 abp_rx1_delay = 25;

  // RX1 DR offset (for ABP).
  uint32 abp_rx1_dr_offset = 26;

  // RX2 DR (for ABP).
  uint32 abp_rx2_dr = 27;

  // RX2 frequency (for ABP, Hz).
  uint32 abp_rx2_freq = 28;

  // Flush queue on device activation.
  bool flush_queue_on_activate = 29;

  // Uplink interval (seconds).
  // This defines the expected uplink interval which the device uses for
  // communication. If the uplink interval has expired and no uplink has
  // been received, the device is considered inactive.
  uint32 uplink_interval = 30;

  // Device-status request interval (times / day).
  // This defines the times per day that ChirpStack will request the
  // device-status from the device.
  uint32 device_status_req_interval = 31;

}

message GetDeviceRequest {
  // DevEUI (EUI64).
  string dev_eui = 1;
}

message GetDeviceResponse {
  // Device object.
  Device device = 1;

  // Created at timestamp.
  google.protobuf.Timestamp created_at = 2;

  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 3;

  // Last seen at timestamp.
  google.protobuf.Timestamp last_seen_at = 4;

}

message UpdateDeviceRequest {
  // Device object.
  Device device = 1;
}

message DeleteDeviceRequest {
  // DevEUI (EUI64).
  string dev_eui = 1;
}


message ListDevicesRequest {
  // Max number of devices to return in the result-set.
  uint32 limit = 1;

  // Offset in the result-set (for pagination).
  uint32 offset = 2;

  // If set, the given string will be used to search on name (optional).
  string search = 3;

  // Application ID (UUID) to filter devices on.
  string application_id = 4;

  // Multicst-group ID (UUID) to filter devices on.
  string multicast_group_id = 5;
}

message ListDevicesResponse {
  // Total number of devices.
  uint32 total_count = 1;

  // Result-set.
  repeated DeviceListItem result = 2;
}


message DeviceListItem {
  // DevEUI (EUI64).
  string dev_eui = 1;

  // Created at timestamp.
  google.protobuf.Timestamp created_at = 2;

  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 3;

  // Last seen at timestamp.
  google.protobuf.Timestamp last_seen_at = 4;

  // Name.
  string name = 5;

  // Description.                                                                                                
  string description = 6;

}

message UpdateDeviceKeysRequest {
  // Device-keys object.
  DeviceKeys device_keys = 1;
}

message FlushDevNoncesRequest {
  // Device EUI (EUI64).
  string dev_eui = 1;
}

message ActivateDeviceRequest {
  // Device activation object.
  DeviceActivation device_activation = 1;
}

message DeactivateDeviceRequest {
  // DevEUI (EUI64).
  string dev_eui = 1;
}

message GetDeviceActivationRequest {
  // DevEUI (EUI64).
  string dev_eui = 1;
}

message GetDeviceActivationResponse {
  // Device activation object.
  DeviceActivation device_activation = 1;

  // // Join-Server context.
  // // A non-empty value indicatest that ChirpStack does not have access to
  // // the AppSKey and that the encryption / decryption of the payloads is
  // // the responsibility of the end-application.
  // common.JoinServerContext join_server_context = 2;
}